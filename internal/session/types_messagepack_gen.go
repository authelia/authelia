// Code generated by codecgen - DO NOT EDIT.

package session

import (
	"errors"
	pkg2_protocol "github.com/go-webauthn/webauthn/protocol"
	pkg3_webauthncose "github.com/go-webauthn/webauthn/protocol/webauthncose"
	pkg1_webauthn "github.com/go-webauthn/webauthn/webauthn"
	codec1978 "github.com/hashicorp/go-msgpack/v2/codec"
	"net"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF89511 = 1
	codecSelferCcRAW9511  = 255
	// ----- value types used ----
	codecSelferValueTypeArray9511  = 10
	codecSelferValueTypeMap9511    = 9
	codecSelferValueTypeString9511 = 6
	codecSelferValueTypeInt9511    = 2
	codecSelferValueTypeUint9511   = 3
	codecSelferValueTypeFloat9511  = 4
	codecSelferBitsize9511         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct9511 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer9511 struct{}

func init() {
	if codec1978.GenVersion != 10 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 10, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false {
		var _ byte = 0 // reference the types, but skip this branch at build/run time
		var v0 pkg2_protocol.UserVerificationRequirement
		var v1 pkg3_webauthncose.COSEAlgorithmIdentifier
		var v2 pkg1_webauthn.SessionData
		var v3 net.IP
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *UserSessionMessagePack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [12]bool{    // should field at this index be written?
				x.Domain != "",                          // Domain
				x.Username != "",                        // Username
				x.KeepMeLoggedIn,                        // KeepMeLoggedIn
				x.LastActivity != 0,                     // LastActivity
				x.FirstFactorAuthnTimestamp != 0,        // FirstFactorAuthnTimestamp
				x.SecondFactorAuthnTimestamp != 0,       // SecondFactorAuthnTimestamp
				len(x.AuthenticationMethodRefs) != 0,    // AuthenticationMethodRefs
				x.WebAuthn != nil,                       // WebAuthn
				x.TOTP != nil,                           // TOTP
				x.PasswordResetUsername != nil,          // PasswordResetUsername
				x.RefreshTTL != 0,                       // RefreshTTL
				x.Elevations != ElevationsMessagePack{}, // Elevations
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(12)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Domain)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Domain))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, "")
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"domain\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `domain`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Domain)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Domain))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Username)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Username))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, "")
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"username\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `username`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Username)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Username))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeBool(bool(x.KeepMeLoggedIn))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"remember\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `remember`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.KeepMeLoggedIn))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeInt(int64(x.LastActivity))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"act\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `act`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeInt(int64(x.LastActivity))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeInt(int64(x.FirstFactorAuthnTimestamp))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"ffa\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `ffa`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeInt(int64(x.FirstFactorAuthnTimestamp))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if false {
					} else {
						r.EncodeInt(int64(x.SecondFactorAuthnTimestamp))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"mfa\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `mfa`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeInt(int64(x.SecondFactorAuthnTimestamp))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if x.AuthenticationMethodRefs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicestring(([]string)(x.AuthenticationMethodRefs), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"amr\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `amr`)
					}
					r.WriteMapElemValue()
					if x.AuthenticationMethodRefs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicestring(([]string)(x.AuthenticationMethodRefs), e)
						}
					}
				}
			}
			var yyn24 bool
			if x.WebAuthn == nil {
				yyn24 = true
				goto LABEL24
			}
		LABEL24:
			if yyr2 || yy2arr2 {
				if yyn24 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[7] {
						if x.WebAuthn == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt25 := z.Extension(z.I2Rtid(x.WebAuthn)); yyxt25 != nil {
								z.EncExtension(x.WebAuthn, yyxt25)
							} else {
								z.EncFallback(x.WebAuthn)
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"webauthn\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `webauthn`)
					}
					r.WriteMapElemValue()
					if yyn24 {
						r.EncodeNil()
					} else {
						if x.WebAuthn == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt26 := z.Extension(z.I2Rtid(x.WebAuthn)); yyxt26 != nil {
								z.EncExtension(x.WebAuthn, yyxt26)
							} else {
								z.EncFallback(x.WebAuthn)
							}
						}
					}
				}
			}
			var yyn27 bool
			if x.TOTP == nil {
				yyn27 = true
				goto LABEL27
			}
		LABEL27:
			if yyr2 || yy2arr2 {
				if yyn27 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[8] {
						if x.TOTP == nil {
							r.EncodeNil()
						} else {
							x.TOTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"totp\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `totp`)
					}
					r.WriteMapElemValue()
					if yyn27 {
						r.EncodeNil()
					} else {
						if x.TOTP == nil {
							r.EncodeNil()
						} else {
							x.TOTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn30 bool
			if x.PasswordResetUsername == nil {
				yyn30 = true
				goto LABEL30
			}
		LABEL30:
			if yyr2 || yy2arr2 {
				if yyn30 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[9] {
						if x.PasswordResetUsername == nil {
							r.EncodeNil()
						} else {
							yy31 := *x.PasswordResetUsername
							if false {
							} else {
								if z.EncBasicHandle().StringToRaw {
									r.EncodeStringBytesRaw(z.BytesView(string(yy31)))
								} else {
									r.EncodeStringEnc(codecSelferCcUTF89511, string(yy31))
								}
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					r.EncodeStringEnc(codecSelferCcUTF89511, `username_reset`)
					r.WriteMapElemValue()
					if yyn30 {
						r.EncodeNil()
					} else {
						if x.PasswordResetUsername == nil {
							r.EncodeNil()
						} else {
							yy33 := *x.PasswordResetUsername
							if false {
							} else {
								if z.EncBasicHandle().StringToRaw {
									r.EncodeStringBytesRaw(z.BytesView(string(yy33)))
								} else {
									r.EncodeStringEnc(codecSelferCcUTF89511, string(yy33))
								}
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if false {
					} else {
						r.EncodeInt(int64(x.RefreshTTL))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"ttl\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `ttl`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeInt(int64(x.RefreshTTL))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[11] {
					yy39 := &x.Elevations
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"elevations\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `elevations`)
					}
					r.WriteMapElemValue()
					yy41 := &x.Elevations
					yy41.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UserSessionMessagePack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9511 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9511 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9511)
		}
	}
}

func (x *UserSessionMessagePack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "domain":
			if r.TryDecodeAsNil() {
				x.Domain = ""
			} else {
				x.Domain = (string)(r.DecodeString())
			}
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		case "remember":
			if r.TryDecodeAsNil() {
				x.KeepMeLoggedIn = false
			} else {
				x.KeepMeLoggedIn = (bool)(r.DecodeBool())
			}
		case "act":
			if r.TryDecodeAsNil() {
				x.LastActivity = 0
			} else {
				x.LastActivity = (int64)(r.DecodeInt64())
			}
		case "ffa":
			if r.TryDecodeAsNil() {
				x.FirstFactorAuthnTimestamp = 0
			} else {
				x.FirstFactorAuthnTimestamp = (int64)(r.DecodeInt64())
			}
		case "mfa":
			if r.TryDecodeAsNil() {
				x.SecondFactorAuthnTimestamp = 0
			} else {
				x.SecondFactorAuthnTimestamp = (int64)(r.DecodeInt64())
			}
		case "amr":
			if r.TryDecodeAsNil() {
				x.AuthenticationMethodRefs = nil
			} else {
				if false {
				} else {
					h.decSlicestring((*[]string)(&x.AuthenticationMethodRefs), d)
				}
			}
		case "webauthn":
			if r.TryDecodeAsNil() {
				if true && x.WebAuthn != nil {
					x.WebAuthn = nil
				}
			} else {
				if x.WebAuthn == nil {
					x.WebAuthn = new(WebAuthn)
				}

				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.WebAuthn)); yyxt13 != nil {
					z.DecExtension(x.WebAuthn, yyxt13)
				} else {
					z.DecFallback(x.WebAuthn, false)
				}
			}
		case "totp":
			if r.TryDecodeAsNil() {
				if true && x.TOTP != nil {
					x.TOTP = nil
				}
			} else {
				if x.TOTP == nil {
					x.TOTP = new(TOTPMessagePack)
				}

				x.TOTP.CodecDecodeSelf(d)
			}
		case "username_reset":
			if r.TryDecodeAsNil() {
				if true && x.PasswordResetUsername != nil {
					x.PasswordResetUsername = nil
				}
			} else {
				if x.PasswordResetUsername == nil {
					x.PasswordResetUsername = new(string)
				}

				if false {
				} else {
					*x.PasswordResetUsername = (string)(r.DecodeString())
				}
			}
		case "ttl":
			if r.TryDecodeAsNil() {
				x.RefreshTTL = 0
			} else {
				x.RefreshTTL = (int64)(r.DecodeInt64())
			}
		case "elevations":
			if r.TryDecodeAsNil() {
				x.Elevations = ElevationsMessagePack{}
			} else {
				x.Elevations.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UserSessionMessagePack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Domain = ""
	} else {
		x.Domain = (string)(r.DecodeString())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.KeepMeLoggedIn = false
	} else {
		x.KeepMeLoggedIn = (bool)(r.DecodeBool())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LastActivity = 0
	} else {
		x.LastActivity = (int64)(r.DecodeInt64())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FirstFactorAuthnTimestamp = 0
	} else {
		x.FirstFactorAuthnTimestamp = (int64)(r.DecodeInt64())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SecondFactorAuthnTimestamp = 0
	} else {
		x.SecondFactorAuthnTimestamp = (int64)(r.DecodeInt64())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AuthenticationMethodRefs = nil
	} else {
		if false {
		} else {
			h.decSlicestring((*[]string)(&x.AuthenticationMethodRefs), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.WebAuthn != nil {
			x.WebAuthn = nil
		}
	} else {
		if x.WebAuthn == nil {
			x.WebAuthn = new(WebAuthn)
		}

		if false {
		} else if yyxt29 := z.Extension(z.I2Rtid(x.WebAuthn)); yyxt29 != nil {
			z.DecExtension(x.WebAuthn, yyxt29)
		} else {
			z.DecFallback(x.WebAuthn, false)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.TOTP != nil {
			x.TOTP = nil
		}
	} else {
		if x.TOTP == nil {
			x.TOTP = new(TOTPMessagePack)
		}

		x.TOTP.CodecDecodeSelf(d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.PasswordResetUsername != nil {
			x.PasswordResetUsername = nil
		}
	} else {
		if x.PasswordResetUsername == nil {
			x.PasswordResetUsername = new(string)
		}

		if false {
		} else {
			*x.PasswordResetUsername = (string)(r.DecodeString())
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RefreshTTL = 0
	} else {
		x.RefreshTTL = (int64)(r.DecodeInt64())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Elevations = ElevationsMessagePack{}
	} else {
		x.Elevations.CodecDecodeSelf(d)
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	r.ReadArrayEnd()
}

func (x *WebAuthnMessagePack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [9]bool{     // should field at this index be written?
				true,                             // Challenge
				true,                             // RelyingPartyID
				len(x.UserID) != 0,               // UserID
				x.Description != "",              // Description
				len(x.AllowedCredentialIDs) != 0, // AllowedCredentialIDs
				true,                             // Expires
				true,                             // UserVerification
				len(x.Extensions) != 0,           // Extensions
				len(x.CredParams) != 0,           // CredParams
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(9)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Challenge)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Challenge))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"chal\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `chal`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Challenge)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Challenge))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.RelyingPartyID)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.RelyingPartyID))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"rpid\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `rpid`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.RelyingPartyID)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.RelyingPartyID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if x.UserID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytesRaw([]byte(x.UserID))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"uid\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `uid`)
					}
					r.WriteMapElemValue()
					if x.UserID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							r.EncodeStringBytesRaw([]byte(x.UserID))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Description)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Description))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, "")
					}
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"desc\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `desc`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Description)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Description))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if x.AllowedCredentialIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSliceuint8(([][]uint8)(x.AllowedCredentialIDs), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"allow\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `allow`)
					}
					r.WriteMapElemValue()
					if x.AllowedCredentialIDs == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSliceSliceuint8(([][]uint8)(x.AllowedCredentialIDs), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Expires))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"exp\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `exp`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Expires))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.UserVerification)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.UserVerification))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"uv\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `uv`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.UserVerification)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.UserVerification))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if x.Extensions == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringInterface((map[string]interface{})(x.Extensions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"ext\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `ext`)
					}
					r.WriteMapElemValue()
					if x.Extensions == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encMapstringInterface((map[string]interface{})(x.Extensions), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if x.CredParams == nil {
						r.EncodeNil()
					} else {
						x.CredParams.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"param\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `param`)
					}
					r.WriteMapElemValue()
					if x.CredParams == nil {
						r.EncodeNil()
					} else {
						x.CredParams.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *WebAuthnMessagePack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9511 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9511 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9511)
		}
	}
}

func (x *WebAuthnMessagePack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "chal":
			if r.TryDecodeAsNil() {
				x.Challenge = ""
			} else {
				x.Challenge = (string)(r.DecodeString())
			}
		case "rpid":
			if r.TryDecodeAsNil() {
				x.RelyingPartyID = ""
			} else {
				x.RelyingPartyID = (string)(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UserID = nil
			} else {
				if false {
				} else {
					x.UserID = r.DecodeBytes(([]byte)(x.UserID), false)
				}
			}
		case "desc":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = (string)(r.DecodeString())
			}
		case "allow":
			if r.TryDecodeAsNil() {
				x.AllowedCredentialIDs = nil
			} else {
				if false {
				} else {
					h.decSliceSliceuint8((*[][]uint8)(&x.AllowedCredentialIDs), d)
				}
			}
		case "exp":
			if r.TryDecodeAsNil() {
				x.Expires = 0
			} else {
				x.Expires = (int64)(r.DecodeInt64())
			}
		case "uv":
			if r.TryDecodeAsNil() {
				x.UserVerification = ""
			} else {
				x.UserVerification = (string)(r.DecodeString())
			}
		case "ext":
			if r.TryDecodeAsNil() {
				x.Extensions = nil
			} else {
				if false {
				} else {
					h.decMapstringInterface((*map[string]interface{})(&x.Extensions), d)
				}
			}
		case "param":
			if r.TryDecodeAsNil() {
				x.CredParams = nil
			} else {
				x.CredParams.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *WebAuthnMessagePack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Challenge = ""
	} else {
		x.Challenge = (string)(r.DecodeString())
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RelyingPartyID = ""
	} else {
		x.RelyingPartyID = (string)(r.DecodeString())
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UserID = nil
	} else {
		if false {
		} else {
			x.UserID = r.DecodeBytes(([]byte)(x.UserID), false)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = (string)(r.DecodeString())
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AllowedCredentialIDs = nil
	} else {
		if false {
		} else {
			h.decSliceSliceuint8((*[][]uint8)(&x.AllowedCredentialIDs), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Expires = 0
	} else {
		x.Expires = (int64)(r.DecodeInt64())
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UserVerification = ""
	} else {
		x.UserVerification = (string)(r.DecodeString())
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Extensions = nil
	} else {
		if false {
		} else {
			h.decMapstringInterface((*map[string]interface{})(&x.Extensions), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CredParams = nil
	} else {
		x.CredParams.CodecDecodeSelf(d)
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	r.ReadArrayEnd()
}

func (x CredentialParametersMessagePack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.encCredentialParametersMessagePack((CredentialParametersMessagePack)(x), e)
		}
	}
}

func (x *CredentialParametersMessagePack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.decCredentialParametersMessagePack((*CredentialParametersMessagePack)(x), d)
	}
}

func (x *CredentialParameterMessagePack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Type)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Type))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"typ\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `typ`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Type)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Type))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Algorithm))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"alg\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `alg`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Algorithm))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CredentialParameterMessagePack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9511 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9511 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9511)
		}
	}
}

func (x *CredentialParameterMessagePack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "typ":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = (string)(r.DecodeString())
			}
		case "alg":
			if r.TryDecodeAsNil() {
				x.Algorithm = 0
			} else {
				x.Algorithm = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize9511))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CredentialParameterMessagePack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Algorithm = 0
	} else {
		x.Algorithm = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize9511))
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ElevationsMessagePack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [1]bool{     // should field at this index be written?
				x.User != nil, // User
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			var yyn3 bool
			if x.User == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[0] {
						if x.User == nil {
							r.EncodeNil()
						} else {
							x.User.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"user\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `user`)
					}
					r.WriteMapElemValue()
					if yyn3 {
						r.EncodeNil()
					} else {
						if x.User == nil {
							r.EncodeNil()
						} else {
							x.User.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ElevationsMessagePack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9511 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9511 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9511)
		}
	}
}

func (x *ElevationsMessagePack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "user":
			if r.TryDecodeAsNil() {
				if true && x.User != nil {
					x.User = nil
				}
			} else {
				if x.User == nil {
					x.User = new(ElevationMessagePack)
				}

				x.User.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ElevationsMessagePack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.User != nil {
			x.User = nil
		}
	} else {
		if x.User == nil {
			x.User = new(ElevationMessagePack)
		}

		x.User.CodecDecodeSelf(d)
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ElevationMessagePack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.ID))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"id\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `id`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.RemoteIP == nil {
					r.EncodeNil()
				} else {
					if false {
					} else if yyxt7 := z.Extension(z.I2Rtid(x.RemoteIP)); yyxt7 != nil {
						z.EncExtension(x.RemoteIP, yyxt7)
					} else if !z.EncBinary() {
						z.EncTextMarshal(x.RemoteIP)
					} else {
						h.encnet_IP((net.IP)(x.RemoteIP), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"ip\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `ip`)
				}
				r.WriteMapElemValue()
				if x.RemoteIP == nil {
					r.EncodeNil()
				} else {
					if false {
					} else if yyxt8 := z.Extension(z.I2Rtid(x.RemoteIP)); yyxt8 != nil {
						z.EncExtension(x.RemoteIP, yyxt8)
					} else if !z.EncBinary() {
						z.EncTextMarshal(x.RemoteIP)
					} else {
						h.encnet_IP((net.IP)(x.RemoteIP), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Expires))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"exp\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `exp`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Expires))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ElevationMessagePack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9511 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9511 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9511)
		}
	}
}

func (x *ElevationMessagePack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = 0
			} else {
				x.ID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize9511))
			}
		case "ip":
			if r.TryDecodeAsNil() {
				x.RemoteIP = nil
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.RemoteIP)); yyxt6 != nil {
					z.DecExtension(x.RemoteIP, yyxt6)
				} else if !z.DecBinary() {
					z.DecTextUnmarshal(&x.RemoteIP)
				} else {
					h.decnet_IP((*net.IP)(&x.RemoteIP), d)
				}
			}
		case "exp":
			if r.TryDecodeAsNil() {
				x.Expires = 0
			} else {
				x.Expires = (int64)(r.DecodeInt64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ElevationMessagePack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = 0
	} else {
		x.ID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize9511))
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RemoteIP = nil
	} else {
		if false {
		} else if yyxt11 := z.Extension(z.I2Rtid(x.RemoteIP)); yyxt11 != nil {
			z.DecExtension(x.RemoteIP, yyxt11)
		} else if !z.DecBinary() {
			z.DecTextUnmarshal(&x.RemoteIP)
		} else {
			h.decnet_IP((*net.IP)(&x.RemoteIP), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Expires = 0
	} else {
		x.Expires = (int64)(r.DecodeInt64())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *TOTPMessagePack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [6]bool{     // should field at this index be written?
				x.Issuer != "", // Issuer
				true,           // Algorithm
				true,           // Digits
				true,           // Period
				true,           // Secret
				true,           // Expires
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Issuer)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Issuer))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, "")
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"iss\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, `iss`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Issuer)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Issuer))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Algorithm)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Algorithm))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"alg\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `alg`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Algorithm)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Algorithm))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Digits))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"digits\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `digits`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Digits))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Period))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"period\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `period`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Period))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Secret)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Secret))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"secret\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `secret`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Secret)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF89511, string(x.Secret))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Expires))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"exp\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF89511, `exp`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Expires))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *TOTPMessagePack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9511 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9511 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9511)
		}
	}
}

func (x *TOTPMessagePack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "iss":
			if r.TryDecodeAsNil() {
				x.Issuer = ""
			} else {
				x.Issuer = (string)(r.DecodeString())
			}
		case "alg":
			if r.TryDecodeAsNil() {
				x.Algorithm = ""
			} else {
				x.Algorithm = (string)(r.DecodeString())
			}
		case "digits":
			if r.TryDecodeAsNil() {
				x.Digits = 0
			} else {
				x.Digits = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}
		case "period":
			if r.TryDecodeAsNil() {
				x.Period = 0
			} else {
				x.Period = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize9511))
			}
		case "secret":
			if r.TryDecodeAsNil() {
				x.Secret = ""
			} else {
				x.Secret = (string)(r.DecodeString())
			}
		case "exp":
			if r.TryDecodeAsNil() {
				x.Expires = 0
			} else {
				x.Expires = (int64)(r.DecodeInt64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *TOTPMessagePack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Issuer = ""
	} else {
		x.Issuer = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Algorithm = ""
	} else {
		x.Algorithm = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Digits = 0
	} else {
		x.Digits = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Period = 0
	} else {
		x.Period = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize9511))
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Secret = ""
	} else {
		x.Secret = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Expires = 0
	} else {
		x.Expires = (int64)(r.DecodeInt64())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer9511) encSlicestring(v []string, e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF89511, string(yyv1))
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9511) decSlicestring(v *[]string, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv1[yyj1] = (string)(r.DecodeString())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9511) encSliceSliceuint8(v [][]uint8, e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				r.EncodeStringBytesRaw([]byte(yyv1))
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9511) decSliceSliceuint8(v *[][]uint8, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][]uint8{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][]uint8, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][]uint8, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if false {
					} else {
						yyv1[yyj1] = r.DecodeBytes(([]byte)(yyv1[yyj1]), false)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][]uint8, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9511) encSliceuint8(v []uint8, e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytesRaw([]byte(v))
}

func (x codecSelfer9511) decSliceuint8(v *[]uint8, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*v = r.DecodeBytes(*((*[]byte)(v)), false)
}

func (x codecSelfer9511) encMapstringInterface(v map[string]interface{}, e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF89511, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer9511) decMapstringInterface(v *map[string]interface{}, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[string]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer9511) encCredentialParametersMessagePack(v CredentialParametersMessagePack, e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9511) decCredentialParametersMessagePack(v *CredentialParametersMessagePack, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []CredentialParameterMessagePack{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]CredentialParameterMessagePack, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]CredentialParameterMessagePack, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, CredentialParameterMessagePack{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = CredentialParameterMessagePack{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]CredentialParameterMessagePack, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9511) encnet_IP(v net.IP, e *codec1978.Encoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytesRaw([]byte(v))
}

func (x codecSelfer9511) decnet_IP(v *net.IP, d *codec1978.Decoder) {
	var h codecSelfer9511
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*v = r.DecodeBytes(*((*[]byte)(v)), false)
}
