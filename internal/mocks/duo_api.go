// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/duo (interfaces: API)
//
// Generated by this command:
//
//	mockgen -package mocks -destination duo_api.go -mock_names API=MockAPI github.com/authelia/authelia/v4/internal/duo API
//

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"

	duo "github.com/authelia/authelia/v4/internal/duo"
	middlewares "github.com/authelia/authelia/v4/internal/middlewares"
	session "github.com/authelia/authelia/v4/internal/session"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AuthCall mocks base method.
func (m *MockAPI) AuthCall(ctx *middlewares.AutheliaCtx, userSession *session.UserSession, values url.Values) (*duo.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthCall", ctx, userSession, values)
	ret0, _ := ret[0].(*duo.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthCall indicates an expected call of AuthCall.
func (mr *MockAPIMockRecorder) AuthCall(ctx, userSession, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCall", reflect.TypeOf((*MockAPI)(nil).AuthCall), ctx, userSession, values)
}

// Call mocks base method.
func (m *MockAPI) Call(ctx *middlewares.AutheliaCtx, userSession *session.UserSession, values url.Values, method, path string) (*duo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, userSession, values, method, path)
	ret0, _ := ret[0].(*duo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockAPIMockRecorder) Call(ctx, userSession, values, method, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockAPI)(nil).Call), ctx, userSession, values, method, path)
}

// PreAuthCall mocks base method.
func (m *MockAPI) PreAuthCall(ctx *middlewares.AutheliaCtx, userSession *session.UserSession, values url.Values) (*duo.PreAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreAuthCall", ctx, userSession, values)
	ret0, _ := ret[0].(*duo.PreAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreAuthCall indicates an expected call of PreAuthCall.
func (mr *MockAPIMockRecorder) PreAuthCall(ctx, userSession, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreAuthCall", reflect.TypeOf((*MockAPI)(nil).PreAuthCall), ctx, userSession, values)
}
