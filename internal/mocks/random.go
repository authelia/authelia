// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/random (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -package mocks -destination random.go -mock_names Provider=MockRandom github.com/authelia/authelia/v4/internal/random Provider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRandom is a mock of Provider interface.
type MockRandom struct {
	ctrl     *gomock.Controller
	recorder *MockRandomMockRecorder
	isgomock struct{}
}

// MockRandomMockRecorder is the mock recorder for MockRandom.
type MockRandomMockRecorder struct {
	mock *MockRandom
}

// NewMockRandom creates a new mock instance.
func NewMockRandom(ctrl *gomock.Controller) *MockRandom {
	mock := &MockRandom{ctrl: ctrl}
	mock.recorder = &MockRandomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandom) EXPECT() *MockRandomMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockRandom) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockRandomMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockRandom)(nil).Bytes))
}

// BytesCustom mocks base method.
func (m *MockRandom) BytesCustom(n int, charset []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesCustom", n, charset)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// BytesCustom indicates an expected call of BytesCustom.
func (mr *MockRandomMockRecorder) BytesCustom(n, charset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesCustom", reflect.TypeOf((*MockRandom)(nil).BytesCustom), n, charset)
}

// BytesCustomErr mocks base method.
func (m *MockRandom) BytesCustomErr(n int, charset []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesCustomErr", n, charset)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BytesCustomErr indicates an expected call of BytesCustomErr.
func (mr *MockRandomMockRecorder) BytesCustomErr(n, charset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesCustomErr", reflect.TypeOf((*MockRandom)(nil).BytesCustomErr), n, charset)
}

// BytesErr mocks base method.
func (m *MockRandom) BytesErr() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesErr")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BytesErr indicates an expected call of BytesErr.
func (mr *MockRandomMockRecorder) BytesErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesErr", reflect.TypeOf((*MockRandom)(nil).BytesErr))
}

// Int mocks base method.
func (m *MockRandom) Int(max *big.Int) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", max)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockRandomMockRecorder) Int(max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockRandom)(nil).Int), max)
}

// IntErr mocks base method.
func (m *MockRandom) IntErr(max *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntErr", max)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntErr indicates an expected call of IntErr.
func (mr *MockRandomMockRecorder) IntErr(max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntErr", reflect.TypeOf((*MockRandom)(nil).IntErr), max)
}

// Intn mocks base method.
func (m *MockRandom) Intn(n int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intn", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// Intn indicates an expected call of Intn.
func (mr *MockRandomMockRecorder) Intn(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intn", reflect.TypeOf((*MockRandom)(nil).Intn), n)
}

// IntnErr mocks base method.
func (m *MockRandom) IntnErr(n int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntnErr", n)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntnErr indicates an expected call of IntnErr.
func (mr *MockRandomMockRecorder) IntnErr(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntnErr", reflect.TypeOf((*MockRandom)(nil).IntnErr), n)
}

// Prime mocks base method.
func (m *MockRandom) Prime(bits int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prime", bits)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prime indicates an expected call of Prime.
func (mr *MockRandomMockRecorder) Prime(bits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prime", reflect.TypeOf((*MockRandom)(nil).Prime), bits)
}

// Read mocks base method.
func (m *MockRandom) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRandomMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRandom)(nil).Read), p)
}

// StringCustom mocks base method.
func (m *MockRandom) StringCustom(n int, characters string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringCustom", n, characters)
	ret0, _ := ret[0].(string)
	return ret0
}

// StringCustom indicates an expected call of StringCustom.
func (mr *MockRandomMockRecorder) StringCustom(n, characters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringCustom", reflect.TypeOf((*MockRandom)(nil).StringCustom), n, characters)
}

// StringCustomErr mocks base method.
func (m *MockRandom) StringCustomErr(n int, characters string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringCustomErr", n, characters)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StringCustomErr indicates an expected call of StringCustomErr.
func (mr *MockRandomMockRecorder) StringCustomErr(n, characters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringCustomErr", reflect.TypeOf((*MockRandom)(nil).StringCustomErr), n, characters)
}
