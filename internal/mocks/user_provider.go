// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/authentication (interfaces: UserProvider)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./internal/mocks/user_provider.go -mock_names UserProvider=MockUserProvider github.com/authelia/authelia/v4/internal/authentication UserProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	authentication "github.com/authelia/authelia/v4/internal/authentication"
	gomock "go.uber.org/mock/gomock"
)

// MockUserProvider is a mock of UserProvider interface.
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
	isgomock struct{}
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider.
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance.
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserProvider) AddUser(userData *authentication.UserDetailsExtended) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserProviderMockRecorder) AddUser(userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserProvider)(nil).AddUser), userData)
}

// ChangePassword mocks base method.
func (m *MockUserProvider) ChangePassword(username, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", username, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserProviderMockRecorder) ChangePassword(username, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserProvider)(nil).ChangePassword), username, oldPassword, newPassword)
}

// CheckUserPassword mocks base method.
func (m *MockUserProvider) CheckUserPassword(username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPassword", username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserPassword indicates an expected call of CheckUserPassword.
func (mr *MockUserProviderMockRecorder) CheckUserPassword(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPassword", reflect.TypeOf((*MockUserProvider)(nil).CheckUserPassword), username, password)
}

// Close mocks base method.
func (m *MockUserProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUserProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserProvider)(nil).Close))
}

// DeleteUser mocks base method.
func (m *MockUserProvider) DeleteUser(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserProviderMockRecorder) DeleteUser(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserProvider)(nil).DeleteUser), username)
}

// GetDetails mocks base method.
func (m *MockUserProvider) GetDetails(username string) (*authentication.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetails", username)
	ret0, _ := ret[0].(*authentication.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetails indicates an expected call of GetDetails.
func (mr *MockUserProviderMockRecorder) GetDetails(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetails", reflect.TypeOf((*MockUserProvider)(nil).GetDetails), username)
}

// GetDetailsExtended mocks base method.
func (m *MockUserProvider) GetDetailsExtended(username string) (*authentication.UserDetailsExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailsExtended", username)
	ret0, _ := ret[0].(*authentication.UserDetailsExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailsExtended indicates an expected call of GetDetailsExtended.
func (mr *MockUserProviderMockRecorder) GetDetailsExtended(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailsExtended", reflect.TypeOf((*MockUserProvider)(nil).GetDetailsExtended), username)
}

// GetRequiredFields mocks base method.
func (m *MockUserProvider) GetRequiredFields() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredFields")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRequiredFields indicates an expected call of GetRequiredFields.
func (mr *MockUserProviderMockRecorder) GetRequiredFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredFields", reflect.TypeOf((*MockUserProvider)(nil).GetRequiredFields))
}

// GetSupportedFields mocks base method.
func (m *MockUserProvider) GetSupportedFields() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFields")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedFields indicates an expected call of GetSupportedFields.
func (mr *MockUserProviderMockRecorder) GetSupportedFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFields", reflect.TypeOf((*MockUserProvider)(nil).GetSupportedFields))
}

// GetUser mocks base method.
func (m *MockUserProvider) GetUser(username string) (*authentication.UserDetailsExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*authentication.UserDetailsExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserProviderMockRecorder) GetUser(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserProvider)(nil).GetUser), username)
}

// ListUsers mocks base method.
func (m *MockUserProvider) ListUsers() ([]authentication.UserDetailsExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers")
	ret0, _ := ret[0].([]authentication.UserDetailsExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserProviderMockRecorder) ListUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserProvider)(nil).ListUsers))
}

// StartupCheck mocks base method.
func (m *MockUserProvider) StartupCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartupCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartupCheck indicates an expected call of StartupCheck.
func (mr *MockUserProviderMockRecorder) StartupCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartupCheck", reflect.TypeOf((*MockUserProvider)(nil).StartupCheck))
}

// UpdatePassword mocks base method.
func (m *MockUserProvider) UpdatePassword(username, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", username, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserProviderMockRecorder) UpdatePassword(username, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserProvider)(nil).UpdatePassword), username, newPassword)
}

// UpdateUser mocks base method.
func (m *MockUserProvider) UpdateUser(username string, userData *authentication.UserDetailsExtended) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", username, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserProviderMockRecorder) UpdateUser(username, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserProvider)(nil).UpdateUser), username, userData)
}

// ValidateUserData mocks base method.
func (m *MockUserProvider) ValidateUserData(userData *authentication.UserDetailsExtended) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserData", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUserData indicates an expected call of ValidateUserData.
func (mr *MockUserProviderMockRecorder) ValidateUserData(userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserData", reflect.TypeOf((*MockUserProvider)(nil).ValidateUserData), userData)
}
