// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/authentication (interfaces: LDAPClientFactory)
//
// Generated by this command:
//
//	mockgen -package authentication -destination ldap_client_factory_mock_test.go -mock_names LDAPClientFactory=MockLDAPClientFactory github.com/authelia/authelia/v4/internal/authentication LDAPClientFactory
//

// Package authentication is a generated GoMock package.
package authentication

import (
	reflect "reflect"

	ldap "github.com/go-ldap/ldap/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockLDAPClientFactory is a mock of LDAPClientFactory interface.
type MockLDAPClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLDAPClientFactoryMockRecorder
}

// MockLDAPClientFactoryMockRecorder is the mock recorder for MockLDAPClientFactory.
type MockLDAPClientFactoryMockRecorder struct {
	mock *MockLDAPClientFactory
}

// NewMockLDAPClientFactory creates a new mock instance.
func NewMockLDAPClientFactory(ctrl *gomock.Controller) *MockLDAPClientFactory {
	mock := &MockLDAPClientFactory{ctrl: ctrl}
	mock.recorder = &MockLDAPClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLDAPClientFactory) EXPECT() *MockLDAPClientFactoryMockRecorder {
	return m.recorder
}

// DialURL mocks base method.
func (m *MockLDAPClientFactory) DialURL(arg0 string, arg1 ...ldap.DialOpt) (LDAPClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DialURL", varargs...)
	ret0, _ := ret[0].(LDAPClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialURL indicates an expected call of DialURL.
func (mr *MockLDAPClientFactoryMockRecorder) DialURL(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialURL", reflect.TypeOf((*MockLDAPClientFactory)(nil).DialURL), varargs...)
}
