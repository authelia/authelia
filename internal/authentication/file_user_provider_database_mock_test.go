// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/authentication (interfaces: FileUserProviderDatabase)
//
// Generated by this command:
//
//	mockgen -package authentication -destination file_user_provider_database_mock_test.go -mock_names FileUserProviderDatabase=MockFileUserDatabase github.com/authelia/authelia/v4/internal/authentication FileUserProviderDatabase
//

// Package authentication is a generated GoMock package.
package authentication

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileUserDatabase is a mock of FileUserProviderDatabase interface.
type MockFileUserDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockFileUserDatabaseMockRecorder
	isgomock struct{}
}

// MockFileUserDatabaseMockRecorder is the mock recorder for MockFileUserDatabase.
type MockFileUserDatabaseMockRecorder struct {
	mock *MockFileUserDatabase
}

// NewMockFileUserDatabase creates a new mock instance.
func NewMockFileUserDatabase(ctrl *gomock.Controller) *MockFileUserDatabase {
	mock := &MockFileUserDatabase{ctrl: ctrl}
	mock.recorder = &MockFileUserDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUserDatabase) EXPECT() *MockFileUserDatabaseMockRecorder {
	return m.recorder
}

// DeleteUserDetails mocks base method.
func (m *MockFileUserDatabase) DeleteUserDetails(username string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUserDetails", username)
}

// DeleteUserDetails indicates an expected call of DeleteUserDetails.
func (mr *MockFileUserDatabaseMockRecorder) DeleteUserDetails(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserDetails", reflect.TypeOf((*MockFileUserDatabase)(nil).DeleteUserDetails), username)
}

// GetAllUserDetails mocks base method.
func (m *MockFileUserDatabase) GetAllUserDetails() ([]UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserDetails")
	ret0, _ := ret[0].([]UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserDetails indicates an expected call of GetAllUserDetails.
func (mr *MockFileUserDatabaseMockRecorder) GetAllUserDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserDetails", reflect.TypeOf((*MockFileUserDatabase)(nil).GetAllUserDetails))
}

// GetAllUsers mocks base method.
func (m *MockFileUserDatabase) GetAllUsers() map[string]FileUserDatabaseUserDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].(map[string]FileUserDatabaseUserDetails)
	return ret0
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockFileUserDatabaseMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockFileUserDatabase)(nil).GetAllUsers))
}

// GetUserDetails mocks base method.
func (m *MockFileUserDatabase) GetUserDetails(username string) (FileUserDatabaseUserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetails", username)
	ret0, _ := ret[0].(FileUserDatabaseUserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetails indicates an expected call of GetUserDetails.
func (mr *MockFileUserDatabaseMockRecorder) GetUserDetails(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetails", reflect.TypeOf((*MockFileUserDatabase)(nil).GetUserDetails), username)
}

// Load mocks base method.
func (m *MockFileUserDatabase) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockFileUserDatabaseMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockFileUserDatabase)(nil).Load))
}

// Save mocks base method.
func (m *MockFileUserDatabase) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileUserDatabaseMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileUserDatabase)(nil).Save))
}

// SetUserDetails mocks base method.
func (m *MockFileUserDatabase) SetUserDetails(username string, details *FileUserDatabaseUserDetails) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserDetails", username, details)
}

// SetUserDetails indicates an expected call of SetUserDetails.
func (mr *MockFileUserDatabaseMockRecorder) SetUserDetails(username, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserDetails", reflect.TypeOf((*MockFileUserDatabase)(nil).SetUserDetails), username, details)
}
