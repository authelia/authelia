// Code generated by codecgen - DO NOT EDIT.

package authentication

import (
	"errors"
	codec1978 "github.com/hashicorp/go-msgpack/v2/codec"
	pkg2_language "golang.org/x/text/language"
	pkg1_url "net/url"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF81846 = 1
	codecSelferCcRAW1846  = 255
	// ----- value types used ----
	codecSelferValueTypeArray1846  = 10
	codecSelferValueTypeMap1846    = 9
	codecSelferValueTypeString1846 = 6
	codecSelferValueTypeInt1846    = 2
	codecSelferValueTypeUint1846   = 3
	codecSelferValueTypeFloat1846  = 4
	codecSelferBitsize1846         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct1846 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1846 struct{}

func init() {
	if codec1978.GenVersion != 10 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 10, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false {
		var _ byte = 0 // reference the types, but skip this branch at build/run time
		var v0 pkg2_language.Tag
		var v1 pkg1_url.URL
		_, _ = v0, v1
	}
}

func (x *UserDetails) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [4]bool{     // should field at this index be written?
				true,                // Username
				x.DisplayName != "", // DisplayName
				len(x.Emails) != 0,  // Emails
				len(x.Groups) != 0,  // Groups
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Username)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Username))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"username\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81846, `username`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.Username)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Username))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.DisplayName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.DisplayName))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeStringEnc(codecSelferCcUTF81846, `display_name`)
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.DisplayName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.DisplayName))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if x.Emails == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicestring(([]string)(x.Emails), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"emails\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `emails`)
					}
					r.WriteMapElemValue()
					if x.Emails == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicestring(([]string)(x.Emails), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if x.Groups == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicestring(([]string)(x.Groups), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"groups\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `groups`)
					}
					r.WriteMapElemValue()
					if x.Groups == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicestring(([]string)(x.Groups), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UserDetails) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1846 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1846 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1846)
		}
	}
}

func (x *UserDetails) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		case "display_name":
			if r.TryDecodeAsNil() {
				x.DisplayName = ""
			} else {
				x.DisplayName = (string)(r.DecodeString())
			}
		case "emails":
			if r.TryDecodeAsNil() {
				x.Emails = nil
			} else {
				if false {
				} else {
					h.decSlicestring((*[]string)(&x.Emails), d)
				}
			}
		case "groups":
			if r.TryDecodeAsNil() {
				x.Groups = nil
			} else {
				if false {
				} else {
					h.decSlicestring((*[]string)(&x.Groups), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UserDetails) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DisplayName = ""
	} else {
		x.DisplayName = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Emails = nil
	} else {
		if false {
		} else {
			h.decSlicestring((*[]string)(&x.Emails), d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Groups = nil
	} else {
		if false {
		} else {
			h.decSlicestring((*[]string)(&x.Groups), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *UserDetailsExtended) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [19]bool{    // should field at this index be written?
				x.GivenName != "",      // GivenName
				x.FamilyName != "",     // FamilyName
				x.MiddleName != "",     // MiddleName
				x.Nickname != "",       // Nickname
				x.Profile != nil,       // Profile
				x.Picture != nil,       // Picture
				x.Website != nil,       // Website
				x.Gender != "",         // Gender
				x.Birthdate != "",      // Birthdate
				x.ZoneInfo != "",       // ZoneInfo
				x.Locale != nil,        // Locale
				x.PhoneNumber != "",    // PhoneNumber
				x.PhoneExtension != "", // PhoneExtension
				x.Address != nil,       // Address
				true,                   // Extra
				true,                   // Username
				x.UserDetails != nil && x.DisplayName != "", // DisplayName
				x.UserDetails != nil && len(x.Emails) != 0,  // Emails
				x.UserDetails != nil && len(x.Groups) != 0,  // Groups
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(19)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.GivenName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.GivenName))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"given\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `given`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.GivenName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.GivenName))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.FamilyName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.FamilyName))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"family\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `family`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.FamilyName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.FamilyName))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.MiddleName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.MiddleName))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"middle\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `middle`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.MiddleName)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.MiddleName))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Nickname)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Nickname))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"nick\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `nick`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Nickname)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Nickname))
						}
					}
				}
			}
			var yyn15 bool
			if x.Profile == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[4] {
						if x.Profile == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt16 := z.Extension(z.I2Rtid(x.Profile)); yyxt16 != nil {
								z.EncExtension(x.Profile, yyxt16)
							} else if z.EncBinary() {
								z.EncBinaryMarshal(x.Profile)
							} else {
								z.EncFallback(x.Profile)
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"profile\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `profile`)
					}
					r.WriteMapElemValue()
					if yyn15 {
						r.EncodeNil()
					} else {
						if x.Profile == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt17 := z.Extension(z.I2Rtid(x.Profile)); yyxt17 != nil {
								z.EncExtension(x.Profile, yyxt17)
							} else if z.EncBinary() {
								z.EncBinaryMarshal(x.Profile)
							} else {
								z.EncFallback(x.Profile)
							}
						}
					}
				}
			}
			var yyn18 bool
			if x.Picture == nil {
				yyn18 = true
				goto LABEL18
			}
		LABEL18:
			if yyr2 || yy2arr2 {
				if yyn18 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[5] {
						if x.Picture == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt19 := z.Extension(z.I2Rtid(x.Picture)); yyxt19 != nil {
								z.EncExtension(x.Picture, yyxt19)
							} else if z.EncBinary() {
								z.EncBinaryMarshal(x.Picture)
							} else {
								z.EncFallback(x.Picture)
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"picture\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `picture`)
					}
					r.WriteMapElemValue()
					if yyn18 {
						r.EncodeNil()
					} else {
						if x.Picture == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt20 := z.Extension(z.I2Rtid(x.Picture)); yyxt20 != nil {
								z.EncExtension(x.Picture, yyxt20)
							} else if z.EncBinary() {
								z.EncBinaryMarshal(x.Picture)
							} else {
								z.EncFallback(x.Picture)
							}
						}
					}
				}
			}
			var yyn21 bool
			if x.Website == nil {
				yyn21 = true
				goto LABEL21
			}
		LABEL21:
			if yyr2 || yy2arr2 {
				if yyn21 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[6] {
						if x.Website == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt22 := z.Extension(z.I2Rtid(x.Website)); yyxt22 != nil {
								z.EncExtension(x.Website, yyxt22)
							} else if z.EncBinary() {
								z.EncBinaryMarshal(x.Website)
							} else {
								z.EncFallback(x.Website)
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"website\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `website`)
					}
					r.WriteMapElemValue()
					if yyn21 {
						r.EncodeNil()
					} else {
						if x.Website == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt23 := z.Extension(z.I2Rtid(x.Website)); yyxt23 != nil {
								z.EncExtension(x.Website, yyxt23)
							} else if z.EncBinary() {
								z.EncBinaryMarshal(x.Website)
							} else {
								z.EncFallback(x.Website)
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Gender)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Gender))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"gender\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `gender`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Gender)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Gender))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Birthdate)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Birthdate))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"birthdate\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `birthdate`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Birthdate)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Birthdate))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[9] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.ZoneInfo)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.ZoneInfo))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"zone\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `zone`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.ZoneInfo)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.ZoneInfo))
						}
					}
				}
			}
			var yyn33 bool
			if x.Locale == nil {
				yyn33 = true
				goto LABEL33
			}
		LABEL33:
			if yyr2 || yy2arr2 {
				if yyn33 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[10] {
						if x.Locale == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt34 := z.Extension(z.I2Rtid(x.Locale)); yyxt34 != nil {
								z.EncExtension(x.Locale, yyxt34)
							} else if !z.EncBinary() {
								z.EncTextMarshal(x.Locale)
							} else {
								z.EncFallback(x.Locale)
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"locale\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `locale`)
					}
					r.WriteMapElemValue()
					if yyn33 {
						r.EncodeNil()
					} else {
						if x.Locale == nil {
							r.EncodeNil()
						} else {
							if false {
							} else if yyxt35 := z.Extension(z.I2Rtid(x.Locale)); yyxt35 != nil {
								z.EncExtension(x.Locale, yyxt35)
							} else if !z.EncBinary() {
								z.EncTextMarshal(x.Locale)
							} else {
								z.EncFallback(x.Locale)
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[11] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.PhoneNumber)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.PhoneNumber))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"phone\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `phone`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.PhoneNumber)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.PhoneNumber))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.PhoneExtension)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.PhoneExtension))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"ext\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `ext`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.PhoneExtension)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.PhoneExtension))
						}
					}
				}
			}
			var yyn42 bool
			if x.Address == nil {
				yyn42 = true
				goto LABEL42
			}
		LABEL42:
			if yyr2 || yy2arr2 {
				if yyn42 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[13] {
						if x.Address == nil {
							r.EncodeNil()
						} else {
							x.Address.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"address\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `address`)
					}
					r.WriteMapElemValue()
					if yyn42 {
						r.EncodeNil()
					} else {
						if x.Address == nil {
							r.EncodeNil()
						} else {
							x.Address.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Extra == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringInterface((map[string]interface{})(x.Extra), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Extra\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81846, `Extra`)
				}
				r.WriteMapElemValue()
				if x.Extra == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringInterface((map[string]interface{})(x.Extra), e)
					}
				}
			}
			var yyn48 bool
			if x.UserDetails == nil {
				yyn48 = true
				goto LABEL48
			}
		LABEL48:
			if yyr2 || yy2arr2 {
				if yyn48 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Username)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Username))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"username\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81846, `username`)
				}
				r.WriteMapElemValue()
				if yyn48 {
					r.EncodeNil()
				} else {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Username)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Username))
						}
					}
				}
			}
			var yyn51 bool
			if x.UserDetails == nil {
				yyn51 = true
				goto LABEL51
			}
		LABEL51:
			if yyr2 || yy2arr2 {
				if yyn51 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[16] {
						if false {
						} else {
							if z.EncBasicHandle().StringToRaw {
								r.EncodeStringBytesRaw(z.BytesView(string(x.DisplayName)))
							} else {
								r.EncodeStringEnc(codecSelferCcUTF81846, string(x.DisplayName))
							}
						}
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw([]byte{})
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, "")
						}
					}
				}
			} else {
				if yyq2[16] {
					r.WriteMapElemKey()
					r.EncodeStringEnc(codecSelferCcUTF81846, `display_name`)
					r.WriteMapElemValue()
					if yyn51 {
						r.EncodeNil()
					} else {
						if false {
						} else {
							if z.EncBasicHandle().StringToRaw {
								r.EncodeStringBytesRaw(z.BytesView(string(x.DisplayName)))
							} else {
								r.EncodeStringEnc(codecSelferCcUTF81846, string(x.DisplayName))
							}
						}
					}
				}
			}
			var yyn54 bool
			if x.UserDetails == nil {
				yyn54 = true
				goto LABEL54
			}
		LABEL54:
			if yyr2 || yy2arr2 {
				if yyn54 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[17] {
						if x.Emails == nil {
							r.EncodeNil()
						} else {
							if false {
							} else {
								h.encSlicestring(([]string)(x.Emails), e)
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[17] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"emails\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `emails`)
					}
					r.WriteMapElemValue()
					if yyn54 {
						r.EncodeNil()
					} else {
						if x.Emails == nil {
							r.EncodeNil()
						} else {
							if false {
							} else {
								h.encSlicestring(([]string)(x.Emails), e)
							}
						}
					}
				}
			}
			var yyn57 bool
			if x.UserDetails == nil {
				yyn57 = true
				goto LABEL57
			}
		LABEL57:
			if yyr2 || yy2arr2 {
				if yyn57 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[18] {
						if x.Groups == nil {
							r.EncodeNil()
						} else {
							if false {
							} else {
								h.encSlicestring(([]string)(x.Groups), e)
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[18] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"groups\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `groups`)
					}
					r.WriteMapElemValue()
					if yyn57 {
						r.EncodeNil()
					} else {
						if x.Groups == nil {
							r.EncodeNil()
						} else {
							if false {
							} else {
								h.encSlicestring(([]string)(x.Groups), e)
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UserDetailsExtended) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1846 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1846 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1846)
		}
	}
}

func (x *UserDetailsExtended) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "given":
			if r.TryDecodeAsNil() {
				x.GivenName = ""
			} else {
				x.GivenName = (string)(r.DecodeString())
			}
		case "family":
			if r.TryDecodeAsNil() {
				x.FamilyName = ""
			} else {
				x.FamilyName = (string)(r.DecodeString())
			}
		case "middle":
			if r.TryDecodeAsNil() {
				x.MiddleName = ""
			} else {
				x.MiddleName = (string)(r.DecodeString())
			}
		case "nick":
			if r.TryDecodeAsNil() {
				x.Nickname = ""
			} else {
				x.Nickname = (string)(r.DecodeString())
			}
		case "profile":
			if r.TryDecodeAsNil() {
				if true && x.Profile != nil {
					x.Profile = nil
				}
			} else {
				if x.Profile == nil {
					x.Profile = new(pkg1_url.URL)
				}

				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Profile)); yyxt9 != nil {
					z.DecExtension(x.Profile, yyxt9)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Profile)
				} else {
					z.DecFallback(x.Profile, false)
				}
			}
		case "picture":
			if r.TryDecodeAsNil() {
				if true && x.Picture != nil {
					x.Picture = nil
				}
			} else {
				if x.Picture == nil {
					x.Picture = new(pkg1_url.URL)
				}

				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Picture)); yyxt11 != nil {
					z.DecExtension(x.Picture, yyxt11)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Picture)
				} else {
					z.DecFallback(x.Picture, false)
				}
			}
		case "website":
			if r.TryDecodeAsNil() {
				if true && x.Website != nil {
					x.Website = nil
				}
			} else {
				if x.Website == nil {
					x.Website = new(pkg1_url.URL)
				}

				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.Website)); yyxt13 != nil {
					z.DecExtension(x.Website, yyxt13)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Website)
				} else {
					z.DecFallback(x.Website, false)
				}
			}
		case "gender":
			if r.TryDecodeAsNil() {
				x.Gender = ""
			} else {
				x.Gender = (string)(r.DecodeString())
			}
		case "birthdate":
			if r.TryDecodeAsNil() {
				x.Birthdate = ""
			} else {
				x.Birthdate = (string)(r.DecodeString())
			}
		case "zone":
			if r.TryDecodeAsNil() {
				x.ZoneInfo = ""
			} else {
				x.ZoneInfo = (string)(r.DecodeString())
			}
		case "locale":
			if r.TryDecodeAsNil() {
				if true && x.Locale != nil {
					x.Locale = nil
				}
			} else {
				if x.Locale == nil {
					x.Locale = new(pkg2_language.Tag)
				}

				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(x.Locale)); yyxt18 != nil {
					z.DecExtension(x.Locale, yyxt18)
				} else if !z.DecBinary() {
					z.DecTextUnmarshal(x.Locale)
				} else {
					z.DecFallback(x.Locale, false)
				}
			}
		case "phone":
			if r.TryDecodeAsNil() {
				x.PhoneNumber = ""
			} else {
				x.PhoneNumber = (string)(r.DecodeString())
			}
		case "ext":
			if r.TryDecodeAsNil() {
				x.PhoneExtension = ""
			} else {
				x.PhoneExtension = (string)(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				if true && x.Address != nil {
					x.Address = nil
				}
			} else {
				if x.Address == nil {
					x.Address = new(UserDetailsAddress)
				}

				x.Address.CodecDecodeSelf(d)
			}
		case "Extra":
			if r.TryDecodeAsNil() {
				x.Extra = nil
			} else {
				if false {
				} else {
					h.decMapstringInterface((*map[string]interface{})(&x.Extra), d)
				}
			}
		case "username":
			if r.TryDecodeAsNil() {
				if true && x.UserDetails != nil {
					x.UserDetails.Username = ""
				}
			} else {
				if x.UserDetails == nil {
					x.UserDetails = new(UserDetails)
				}

				x.Username = (string)(r.DecodeString())
			}
		case "display_name":
			if r.TryDecodeAsNil() {
				if true && x.UserDetails != nil {
					x.UserDetails.DisplayName = ""
				}
			} else {
				if x.UserDetails == nil {
					x.UserDetails = new(UserDetails)
				}

				x.DisplayName = (string)(r.DecodeString())
			}
		case "emails":
			if r.TryDecodeAsNil() {
				if true && x.UserDetails != nil {
					x.UserDetails.Emails = nil
				}
			} else {
				if x.UserDetails == nil {
					x.UserDetails = new(UserDetails)
				}

				if false {
				} else {
					h.decSlicestring((*[]string)(&x.Emails), d)
				}
			}
		case "groups":
			if r.TryDecodeAsNil() {
				if true && x.UserDetails != nil {
					x.UserDetails.Groups = nil
				}
			} else {
				if x.UserDetails == nil {
					x.UserDetails = new(UserDetails)
				}

				if false {
				} else {
					h.decSlicestring((*[]string)(&x.Groups), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UserDetailsExtended) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GivenName = ""
	} else {
		x.GivenName = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FamilyName = ""
	} else {
		x.FamilyName = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.MiddleName = ""
	} else {
		x.MiddleName = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Nickname = ""
	} else {
		x.Nickname = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Profile != nil {
			x.Profile = nil
		}
	} else {
		if x.Profile == nil {
			x.Profile = new(pkg1_url.URL)
		}

		if false {
		} else if yyxt36 := z.Extension(z.I2Rtid(x.Profile)); yyxt36 != nil {
			z.DecExtension(x.Profile, yyxt36)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Profile)
		} else {
			z.DecFallback(x.Profile, false)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Picture != nil {
			x.Picture = nil
		}
	} else {
		if x.Picture == nil {
			x.Picture = new(pkg1_url.URL)
		}

		if false {
		} else if yyxt38 := z.Extension(z.I2Rtid(x.Picture)); yyxt38 != nil {
			z.DecExtension(x.Picture, yyxt38)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Picture)
		} else {
			z.DecFallback(x.Picture, false)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Website != nil {
			x.Website = nil
		}
	} else {
		if x.Website == nil {
			x.Website = new(pkg1_url.URL)
		}

		if false {
		} else if yyxt40 := z.Extension(z.I2Rtid(x.Website)); yyxt40 != nil {
			z.DecExtension(x.Website, yyxt40)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Website)
		} else {
			z.DecFallback(x.Website, false)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Gender = ""
	} else {
		x.Gender = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Birthdate = ""
	} else {
		x.Birthdate = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ZoneInfo = ""
	} else {
		x.ZoneInfo = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Locale != nil {
			x.Locale = nil
		}
	} else {
		if x.Locale == nil {
			x.Locale = new(pkg2_language.Tag)
		}

		if false {
		} else if yyxt45 := z.Extension(z.I2Rtid(x.Locale)); yyxt45 != nil {
			z.DecExtension(x.Locale, yyxt45)
		} else if !z.DecBinary() {
			z.DecTextUnmarshal(x.Locale)
		} else {
			z.DecFallback(x.Locale, false)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PhoneNumber = ""
	} else {
		x.PhoneNumber = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PhoneExtension = ""
	} else {
		x.PhoneExtension = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Address != nil {
			x.Address = nil
		}
	} else {
		if x.Address == nil {
			x.Address = new(UserDetailsAddress)
		}

		x.Address.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Extra = nil
	} else {
		if false {
		} else {
			h.decMapstringInterface((*map[string]interface{})(&x.Extra), d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.UserDetails != nil {
			x.UserDetails.Username = ""
		}
	} else {
		if x.UserDetails == nil {
			x.UserDetails = new(UserDetails)
		}

		x.Username = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.UserDetails != nil {
			x.UserDetails.DisplayName = ""
		}
	} else {
		if x.UserDetails == nil {
			x.UserDetails = new(UserDetails)
		}

		x.DisplayName = (string)(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.UserDetails != nil {
			x.UserDetails.Emails = nil
		}
	} else {
		if x.UserDetails == nil {
			x.UserDetails = new(UserDetails)
		}

		if false {
		} else {
			h.decSlicestring((*[]string)(&x.Emails), d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.UserDetails != nil {
			x.UserDetails.Groups = nil
		}
	} else {
		if x.UserDetails == nil {
			x.UserDetails = new(UserDetails)
		}

		if false {
		} else {
			h.decSlicestring((*[]string)(&x.Groups), d)
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	r.ReadArrayEnd()
}

func (x *UserDetailsAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				x.StreetAddress != "", // StreetAddress
				x.Locality != "",      // Locality
				x.Region != "",        // Region
				x.PostalCode != "",    // PostalCode
				x.Country != "",       // Country
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.StreetAddress)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.StreetAddress))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"street\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `street`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.StreetAddress)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.StreetAddress))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Locality)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Locality))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"locality\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `locality`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Locality)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Locality))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Region)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Region))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"region\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `region`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Region)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Region))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.PostalCode)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.PostalCode))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"postcode\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `postcode`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.PostalCode)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.PostalCode))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Country)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Country))
						}
					}
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw([]byte{})
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, "")
					}
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"country\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81846, `country`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						if z.EncBasicHandle().StringToRaw {
							r.EncodeStringBytesRaw(z.BytesView(string(x.Country)))
						} else {
							r.EncodeStringEnc(codecSelferCcUTF81846, string(x.Country))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UserDetailsAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1846 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1846 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1846)
		}
	}
}

func (x *UserDetailsAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "street":
			if r.TryDecodeAsNil() {
				x.StreetAddress = ""
			} else {
				x.StreetAddress = (string)(r.DecodeString())
			}
		case "locality":
			if r.TryDecodeAsNil() {
				x.Locality = ""
			} else {
				x.Locality = (string)(r.DecodeString())
			}
		case "region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				x.Region = (string)(r.DecodeString())
			}
		case "postcode":
			if r.TryDecodeAsNil() {
				x.PostalCode = ""
			} else {
				x.PostalCode = (string)(r.DecodeString())
			}
		case "country":
			if r.TryDecodeAsNil() {
				x.Country = ""
			} else {
				x.Country = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UserDetailsAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.StreetAddress = ""
	} else {
		x.StreetAddress = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Locality = ""
	} else {
		x.Locality = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		x.Region = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PostalCode = ""
	} else {
		x.PostalCode = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Country = ""
	} else {
		x.Country = (string)(r.DecodeString())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1846) encSlicestring(v []string, e *codec1978.Encoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF81846, string(yyv1))
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1846) decSlicestring(v *[]string, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv1[yyj1] = (string)(r.DecodeString())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1846) encMapstringInterface(v map[string]interface{}, e *codec1978.Encoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF81846, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer1846) decMapstringInterface(v *map[string]interface{}, d *codec1978.Decoder) {
	var h codecSelfer1846
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[string]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}
